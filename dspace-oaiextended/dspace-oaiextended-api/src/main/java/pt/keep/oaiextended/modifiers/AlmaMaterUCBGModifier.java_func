package pt.keep.oaiextended.modifiers;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Arrays;
import java.util.Locale;

import org.dspace.content.DCValue;
import org.dspace.content.Item;
import org.dspace.content.Community;
import org.dspace.core.Constants;
import org.dspace.core.ConfigurationManager;
import org.apache.log4j.Logger;
import org.dspace.core.LogManager;


import pt.keep.oaiextended.AgentItem;
import pt.keep.oaiextended.Modifier;
import pt.keep.oaiextended.AgentContext;
import pt.keep.oaiextended.Agent;



/**
 * This Modifier will be able to add a prefix to a restricted list of dc.types
 * 
 * @author Jo√£o Melo
 */
@SuppressWarnings("deprecation")
public class AlmaMaterUCBGModifier extends Modifier {
    	
	private static Logger log = Logger.getLogger(AlmaMaterUCBGModifier.class);
       private static String nr_idx_str = ConfigurationManager.getProperty("oaiextended.modifiers.UCdigitalis.numberofindexes");
       private static int nr_idx = Integer.parseInt(nr_idx_str);
        private static String[] prefix = new String[nr_idx];
        private static String[] index = new String[nr_idx];

        public static final String DEFAULT_MODIFIERS = "pt.keep.oaiextended.modifiers.AlmaMaterUCBGModifier";
	public static final String AGENT_GROUP_NAME = "modifiers";
	public static final String APPLICABLE_SETS_SPECS = "almamater_ucbg";
        public static final String UCDIGITALIS_MAP_FILE = "oaiextended/ucdigitalisAreaCientifica.map";
        public static final String DEFAULT_AREA_PREFIX="Area:";

	private List<String> applicableSetSpecs;
        private List<String> ucdigitalisAreaCientificaValues;
        private String area_prefix;

	public  AlmaMaterUCBGModifier () {
		// super();
            	this.applicableSetSpecs = new ArrayList<String>();
		String[] array = super.getProperty("applicableSetsSpecs", APPLICABLE_SETS_SPECS).split(",");
              log.info(LogManager.getHeader(null,"AlmaMaterUCBGModifier #array -",array[0]));
		for (String string : array) {
			this.applicableSetSpecs.add(string.trim().toLowerCase());
                     log.info(LogManager.getHeader(null,"Modifier #",string.trim()));
		}
		this.getFieldsPrefix();
                this.getUcdigitalisAreaCientificaMap();
              log.info(LogManager.getHeader(null, "AlmaMaterUCBGModifier",null));
	}

 
	@Override
	public void modifyItem(AgentItem oaiItem) {
            String url;
            String logo_url=null;
            url = ConfigurationManager.getProperty("dspace.baseUrl");
            DCValue[] values;
           log.info(LogManager.getHeader(null, "AlmaMaterUCBGModifier:modifyItem", null));
            if (this.index != null) {
                // int size = this.index.length;
                log.info(LogManager.getHeader(null, "AlmaMaterUCBGModifier-modifyItem-size #", String.valueOf(nr_idx)));
		if (oaiItem.hasInformation()) {
                 // Comunidade que inclui as colecoes dos numeros e respetivo logo
              try {
                 if (oaiItem.getInformation().item.getOwningCollection().getParentObject()!=null)
                 {
                     log.info(LogManager.getHeader(null, "item.getOwningCollection().getParentObject()!=null", ""));
                     if (oaiItem.getInformation().item.getOwningCollection().getParentObject().getType()==Constants.COMMUNITY) 
                     {
                         Community comm1 = (Community) oaiItem.getInformation().item.getOwningCollection().getParentObject();
                         log.info(LogManager.getHeader(null, "comm1", comm1.getName()));
                         oaiItem.getInformation().item.addMetadata("dc", "source", "","por",ConfigurationManager.getProperty("oaiextended.modifiers.UCdigitalisModifier.comunidade_prefix")  +comm1.getHandle());
                         if (comm1.getLogo()!=null)
                         {
                            long img_id = comm1.getLogo().getID();
                            if (img_id!=0) 
                            {
                               logo_url = url+"/retrieve/"+String.valueOf(img_id);
                               oaiItem.getInformation().item.addMetadata("dc", "source", "","por",ConfigurationManager.getProperty("oaiextended.modifiers.UCdigitalisModifier.logotipo_prefix")  +logo_url);
                            }
                         }

                      }
                   }
                   else log.info(LogManager.getHeader(null, "item.getOwningCollection().getParentObject()", "IS NULL"));
                 for (int i=0; i< nr_idx; i++){
                           log.info(LogManager.getHeader(null, "AlmamaterUCBGModifier:modifyItem:index #"+ i, this.index[i]));
                           log.info(LogManager.getHeader(null, "AlmamaterUCBGModifier:modifyItem:index #"+ i, this.prefix[i]));
                 }
                 int k=0;
                 for (k=0; k < nr_idx; k++) 
                   {
                         String[] campo= index[k].split("\\.");
                         log.info(LogManager.getHeader(null, "N Iteracoes", String.valueOf(nr_idx)));
                         log.info(LogManager.getHeader(null, "Iteracao n", String.valueOf(k)));
                         log.info(LogManager.getHeader(null, "AlmaMaterUCBGModifier-modifyItem-index #", String.valueOf(k) + " " + this.index[k]));
	                  log.info(LogManager.getHeader(null, "AlmaMaterUCBGModifier-modifyItem-prefix #", String.valueOf(k) + " " + this.prefix[k]));
                         log.info(LogManager.getHeader(null, "Campo size#", String.valueOf(campo.length)));
                
                         
                         
                  	    if (campo.length==2) 
                         {
                          log.info(LogManager.getHeader(null, "Campo 0#", campo[0]));
                         log.info(LogManager.getHeader(null, "Campo 1#", campo[1]));
                          values = oaiItem.getInformation().item.getMetadata(campo[0], campo[1], null, Item.ANY);
                          log.info(LogManager.getHeader(null, "if campo.length == 2#",null ));
                          log.info(LogManager.getHeader(null, "values.length",String.valueOf(values.length) ));
                         }
                         else {
                         log.info(LogManager.getHeader(null, "Campo 0#", campo[0]));
                         log.info(LogManager.getHeader(null, "Campo 1#", campo[1]));
                         log.info(LogManager.getHeader(null, "Campo 2#", campo[2]));
                         values = oaiItem.getInformation().item.getMetadata(campo[0], campo[1], campo[2], Item.ANY);
                         log.info(LogManager.getHeader(null, "values.length",String.valueOf(values.length) ));
                         }
	                  if (values.length == 0) {
                              log.info(LogManager.getHeader(null, "VALUES is NULL",null ));
                              continue;
                         }
                         else {
                          log.info(LogManager.getHeader(null, "VALUES is NOT NULL",null ));
                          log.info(LogManager.getHeader(null,"values.length",String.valueOf(values.length)));
                         }
                         if (campo.length==2) {
                                oaiItem.getInformation().item.clearMetadata(campo[0], campo[1], null, Item.ANY);
                                log.info(LogManager.getHeader(null, "if campo.length == 2#",null ));
                         }
                         else
                              oaiItem.getInformation().item.clearMetadata(campo[0], campo[1], campo[2], Item.ANY);
                         int size1 = values.length;
                         log.info(LogManager.getHeader(null, "values.length",String.valueOf(size1)));
		           for (int j=0; j<size1; j++) 
                         {
                             log.info(LogManager.getHeader(null, "ciclo for DCValue",null ));
           		        oaiItem.getInformation().item.addMetadata(values[j].schema, values[j].element, values[j].qualifier, values[j].language, this.prefix[k] + values[j].value);
                             log.info(LogManager.getHeader(null, "AlmaMaterUCBGModifier-modifyItem-metdata #",values[j].qualifier + "--" + values[j].value));
			    }
                       log.info(LogManager.getHeader(null, "Nova Iteracao", String.valueOf(k)));
		       } 
                    log.info(LogManager.getHeader(null, "Iteracao n", String.valueOf(k)));
              } // try
            catch (Exception e) {
		log.info(LogManager.getHeader(null, "Exception", e.getMessage()));
            }              
          }   // if (oaiItem.hasInformation())

            } //  if (this.index != null)
	}  // modifyItem

private void getUcdigitalisAreaCientificaMap () {
		this.ucdigitalisAreaCientificaValues = new ArrayList<String>();
		try {
			String dir = ConfigurationManager.getProperty("dspace.dir");
			if (dir.endsWith("/"))
				dir += "config/"+ UCDIGITALIS_MAP_FILE;
			else
				dir += "/config/" + UCDIGITALIS_MAP_FILE;
			InputStream is;
			if (dir != null) {
				is = new FileInputStream(dir);
				BufferedReader stream = new BufferedReader(
						new InputStreamReader(is));
				String line;
				while ((line = stream.readLine()) != null) {
					line = line.trim();
					if (!line.equals("") && !line.startsWith("#")) { // Isn't a
																		// comment
					this.ucdigitalisAreaCientificaValues.add(line.trim().toLowerCase());
	    // log.info(LogManager.getHeader(null, "AlmaMaterUCBGModifier-AreaCientificaMap #","--" + line.trim().toLowerCase()));
					}
				}
				stream.close();
				is.close();
			}
		} catch (Exception e) {
		}
	}

	public boolean elementAtUCdigitalisAreaCientificaList (String value) {
                boolean encontrou = false;
		for (String str : this.ucdigitalisAreaCientificaValues) {
                    //   log.info(LogManager.getHeader(null, "elementAtUCdigitalisAreaCientificaList -- str --", str));
                    //   log.info(LogManager.getHeader(null, "elementAtUCdigitalisAreaCientificaList -- value --", value));
			if (str.toLowerCase().trim().equals(value.toLowerCase().trim())) {
                    //        log.info(LogManager.getHeader(null, "elementAtUCdigitalisAreaCientificaList -- value --", value));
                            encontrou=true;
                            break;
                        }
		}
		return encontrou;
	}

    public void getFieldsPrefix()
    {

        int idx = 0;
        if ((area_prefix=ConfigurationManager.getProperty("oaiextended.modifiers.UCdigitalisModifier.area_cientifica_prefix"))==null)
               area_prefix = DEFAULT_AREA_PREFIX;
        String definition, definition2;
        // log.info(LogManager.getHeader(null, "AlmamaterUCBGModifier:getFieldsPrefix"," ## inicio"));
        for ( idx=0; idx < nr_idx ; idx++) 
        {
            definition = ConfigurationManager.getProperty("oaiextended.modifiers.UCdigitalisModifier.fields." + idx);
            log.info(LogManager.getHeader(null, "AlmamaterUCBGModifier:getFieldsPrefix:definition #"+ idx, definition));
            definition2 = null;
            if ((definition2 = ConfigurationManager.getProperty("oaiextended.modifiers.UCdigitalisModifier.prefix." + idx))!=null) {
            log.info(LogManager.getHeader(null, "AlmamaterUCBGModifier:getFieldsPrefix:definition2 #"+ idx, definition2));
                this.index[idx] = definition;
                this.prefix[idx] = definition2;
            }
        }
     // log.info(LogManager.getHeader(null, "ImpactumModifier:getFieldsPrefix"," ## Fim"));
    }

}
